[
  {
    "name": "replace-function-with-index",
    "description": "Replace deprecated index functions such as `FULLTEXT()`,\n`NEAR()`, `WITHIN()`, or `WITHIN_RECTANGLE()` with a regular subquery.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": false,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "inline-subqueries",
    "description": "Try to pull subqueries out into their surrounding scope, e.g.\n`FOR x IN (FOR y IN collection FILTER y.value >= 5 RETURN y.test) RETURN x.a`\nbecomes `FOR tmp IN collection FILTER tmp.value >= 5 LET x = tmp.test RETURN x.a`.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "simplify-conditions",
    "description": "Replace parts in `CalculationNode` expressions with\nsimpler expressions.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "move-calculations-up",
    "description": "Move calculations up in the processing pipeline as far as\npossible (ideally out of enumerations) so they are not executed in loops if not\nrequired. It is quite common that this rule enables further optimizations.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "move-filters-up",
    "description": "Move filters up in the processing pipeline as far as possible\n(ideally out of inner loops) so they filter results as early as possible.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-redundant-calculations",
    "description": "Replace references to redundant calculations (expressions\nwith the exact same result) with a single reference, allowing other rules to\nremove no longer needed calculations.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-unnecessary-filters",
    "description": "Remove `FILTER` conditions that always evaluate to `true`.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-unnecessary-calculations",
    "description": "Remove all calculations whose result is not referenced in the\nquery. This can be a consequence of applying other optimizations.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "specialize-collect",
    "description": "Appears whenever a `COLLECT` statement is used in a query to determine\nthe type of `CollectNode` to use.",
    "flags": {
      "hidden": true,
      "clusterOnly": false,
      "canBeDisabled": false,
      "canCreateAdditionalPlans": true,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-redundant-sorts",
    "description": "Try to merge multiple `SORT` statements into fewer sorts.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "optimize-subqueries",
    "description": "Apply optimizations to subqueries.\n\nThis rule adds a `LIMIT` statement to qualifying subqueries to make them return\nless data. It also modifies the result value of subqueries in case only the\nnumber of subquery results is checked later. This saves copying the document\ndata from the subquery to the outer scope and may enable follow-up\noptimizations.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "interchange-adjacent-enumerations",
    "description": "Try out permutations of `FOR` statements in queries that contain\nmultiple loops, which may enable further optimizations by other rules.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": true,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "move-calculations-up-2",
    "description": "Second pass of moving calculations up in the processing\npipeline as far as possible, to pull them out of inner loops etc.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "move-filters-up-2",
    "description": "Second pass of moving filters up in the processing pipeline\nas far as possible so they filter results as early as possible.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-redundant-sorts-2",
    "description": "Second pass of trying to merge multiple `SORT` statements\ninto fewer sorts.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-sort-rand-limit-1",
    "description": "Remove `SORT RAND() LIMIT 1` constructs by moving the random iteration\ninto `EnumerateCollectionNode`.\n\nThe RocksDB storage engine doesn't allow to seek random documents efficiently.\nThis optimization picks a pseudo-random document based on a limited number of\nseeks within the collection's key range, selecting a random start key in the\nkey range, and then going a few steps before or after that.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-collect-variables",
    "description": "Remove `INTO` and `AGGREGATE` clauses from `COLLECT`\nstatements if the result is not used.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "propagate-constant-attributes",
    "description": "Insert constant values into `FILTER` conditions, replacing\ndynamic attribute values.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-data-modification-out-variables",
    "description": "Avoid setting the pseudo-variables `OLD` and `NEW` if they\nare not used in data modification queries.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "replace-or-with-in",
    "description": "Combine multiple `OR` equality conditions on the same\nvariable or attribute with an `IN` condition.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-redundant-or",
    "description": "Combine multiple `OR` conditions for the same variable or\nattribute into a single condition.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "geo-index-optimizer",
    "description": "Utilize geo-spatial indexes.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "use-indexes",
    "description": "Use indexes to iterate over collections, replacing\n`EnumerateCollectionNode` with `IndexNode` in the query plan.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-filter-covered-by-index",
    "description": "Replace or remove `FilterNode` if the filter conditions are\nalready covered by `IndexNode`.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-unnecessary-filters-2",
    "description": "Second pass of removing `FILTER` conditions that always\nevaluate to `true`.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "use-index-for-sort",
    "description": "Use indexes to avoid `SORT` operations, removing `SortNode`\nfrom the query plan.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "sort-in-values",
    "description": "Use a binary search for in-list lookups with a logarithmic\ncomplexity instead of the default linear complexity in-list lookup if the\ncomparison array on the right-hand side of an `IN` operator is pre-sorted by an\nextra function call.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "optimize-traversal-last-element-access",
    "description": "Transform accesses to the last vertex or edge of the path\noutput variable (`p.vertices[-1]` and `p.edges[-1]`) emitted by AQL traversals\n(`FOR v, e, p IN ...`) with accesses to the vertex or edge variable\n(`v` and `e`). This can avoid computing the path variable at all and enable\nfurther optimizations that are not possible on the path variable `p`.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "optimize-traversals",
    "description": "Try to move `FILTER` conditions into `TraversalNode` for\nearly pruning of results, apply traversal projections, and avoid calculating\nedge and path output variables that are not declared in the query for the\nAQL traversal.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "optimize-paths",
    "description": "Check how the output variables of `K_PATHS`, `K_SHORTEST_PATHS`,\nand `ALL_SHORTEST_PATHS` path search graph algorithms are used and avoid\nloading the vertex documents if they are not accessed in the query.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-filter-covered-by-traversal",
    "description": "Replace or remove `FilterNode` if the filter conditions are\nalready covered by `TraversalNode`.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "handle-arangosearch-views",
    "description": "Appears whenever an `arangosearch` or `search-alias` View is accessed\nin a query.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": false,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "arangosearch-constrained-sort",
    "description": "Make nodes of type `EnumerateViewNode` aware of `SORT` with a\nsubsequent `LIMIT` when using Views to reduce memory usage and avoid unnecessary\nsorting that has already been carried out by ArangoSearch internally.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-unnecessary-calculations-2",
    "description": "Second pass of removing all calculations whose result is not\nreferenced in the query. This can be a consequence of applying other\noptimizations",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-redundant-path-var",
    "description": "Avoid computing the variables emitted by AQL traversals if\nthey are declared but unused in the query, or only used in filters that are\npulled into the traversal, significantly reducing overhead.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "optimize-cluster-single-document-operations",
    "description": "Let a Coordinator work with a document directly if you\nreference a document by its `_key`. In this case, no AQL is executed on the\nDB-Servers.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "optimize-cluster-multiple-document-operations",
    "description": "For bulk `INSERT` operations in cluster deployments, avoid\nunnecessary overhead that AQL queries typically require for the setup and\nshutdown in clusters, as well as for the internal batching.\n\nThis optimization also decreases the number of HTTP requests to the DB-Servers.\n\nThe following patterns are recognized:\n\n- `FOR doc IN @docs INSERT doc INTO collection`, where `@docs` is a\n  bind parameter with an array of documents to be inserted\n- `FOR doc IN [ { … }, { … }, … ] INSERT doc INTO collection`, where the `FOR`\n  loop iterates over an array of input documents known at query compile time\n- `LET docs = [ { … }, { … }, … ] FOR doc IN docs INSERT doc INTO collection`,\n  where the `docs` variable is a static array of input documents known at\n  query compile time\n\nIf a query has such a pattern, and all of the following restrictions are met,\nthen the optimization is triggered:\n\n- There are no following `RETURN` nodes (including any `RETURN OLD` or `RETURN NEW`)\n- The `FOR` loop is not contained in another outer `FOR` loop or subquery\n- There are no other operations (e.g. `LET`, `FILTER`) between `FOR` and `INSERT`\n- `INSERT` is not used on a SmartGraph edge collection\n- The `FOR` loop iterates over a constant, deterministic expression\n\nThe optimization then replaces the `InsertNode` and `EnumerateListNode` with a\n`MultipleRemoteExecutionNode` in the query execution plan, which takes care of\ninserting all documents into the collection in one go. Further optimizer rules\nare skipped if the optimization is triggered.\n",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "move-calculations-down",
    "description": "Move calculations down in the processing pipeline as far as\npossible (below `FILTER`, `LIMIT` and `SUBQUERY` nodes) so they are executed as\nlate as possible and not before their results are required.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "fuse-filters",
    "description": "Merges adjacent `FILTER` nodes together into a single\n`FILTER` node.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "cluster-one-shard",
    "description": "Offload the entire query to the DB-Server (except the client\ncommunication via a Coordinator). This saves all the back and forth that\nnormally exists in regular cluster queries, benefitting traversals and joins\nin particular.\n\nOnly for eligible queries in the OneShard deployment mode as well as for\nqueries that only involve collection(s) with a single shard (and identical\nsharding in case of multiple collections, e.g. via `distributeShardsLike`).\nQueries involving V8 / JavaScript (e.g. user-defined AQL functions) or\nSmartGraphs cannot be optimized.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": true
    }
  },
  {
    "name": "cluster-lift-constant-for-disjoint-graph-nodes",
    "description": "Detect SmartGraph traversals with a constant start vertex to\nprepare follow-up optimizations that can determine the shard location and push\ndown calculations to a DB-Server.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": false,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": true
    }
  },
  {
    "name": "distribute-in-cluster",
    "description": "Appears if query parts get distributed in a cluster.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": false,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "smart-joins",
    "description": "Reduce inter-node joins to server-local joins.\nThis rule is only employed when joining two collections with identical sharding\nsetup via their shard keys.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": true
    }
  },
  {
    "name": "scatter-in-cluster",
    "description": "Appears if nodes of the types `ScatterNode`, `GatherNode`,\nand `RemoteNode` are inserted into a distributed query plan.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": false,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "scatter-satellite-graphs",
    "description": "Execute nodes of the types `TraversalNode`,\n`ShortestPathNode`, and `KShortestPathsNode` on a DB-Server instead of on a\nCoordinator if the nodes operate on SatelliteGraphs, removing the need to\ntransfer data for these nodes.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": true
    }
  },
  {
    "name": "remove-satellite-joins",
    "description": "Optimize nodes of the types `ScatterNode`, `GatherNode`, and\n`RemoteNode` for SatelliteCollections and SatelliteGraphs away. Execute the\nrespective query parts on each participating DB-Server independently, so that\nthe results become available locally without network communication.\nDepends on the `remove-unnecessary-remote-scatter` rule.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": true
    }
  },
  {
    "name": "remove-distribute-nodes",
    "description": "Combine multiples nodes of type `DistributeNode` into one if\ntwo adjacent `DistributeNode` nodes share the same input variables and\ntherefore can be optimized into a single `DistributeNode`.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": true
    }
  },
  {
    "name": "distribute-offset-info-to-cluster",
    "description": "Push the calculation of search highlighting information to\nDB-Servers where the data for determining the offsets is stored.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": false,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": true
    }
  },
  {
    "name": "distribute-filtercalc-to-cluster",
    "description": "Move filters up in a distributed execution plan. Filters are\nmoved as far up in the plan as possible to make result sets as small as\npossible, as early as possible.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "distribute-sort-to-cluster",
    "description": "Move sort operations up in a distributed query. Sorts are\nmoved as far up in the query plan as possible to make result sets as small as\npossible, as early as possible.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "move-filters-into-enumerate",
    "description": "Move filters on non-indexed collection attributes into\n`IndexNode` or `EnumerateCollectionNode` to allow early pruning of\nnon-matching documents. This optimization can help to avoid a lot of temporary\ndocument copies.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-unnecessary-calculations-3",
    "description": "Third pass of removing all calculations whose result is not\nreferenced in the query. This can be a consequence of applying other\noptimizations",
    "flags": {
      "hidden": true,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": true,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-unnecessary-remote-scatter",
    "description": "Avoid distributing calculations and handle them centrally if\na `RemoteNode` is followed by a `ScatterNode`, and the `ScatterNode` is only\nfollowed by calculations or a `SingletonNode`.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "undistribute-remove-after-enum-coll",
    "description": "Push nodes of type `RemoveNode` into the same query part that\nenumerates over the documents of a collection. This saves inter-cluster\nroundtrips between the `EnumerateCollectionNode` and the `RemoveNode`.\nIt includes simple `UPDATE` and `REPLACE` operations that modify multiple\ndocuments and do not use `LIMIT`.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "collect-in-cluster",
    "description": "Perform the heavy processing for `COLLECT` statements on\nDB-Servers and only light-weight aggregation on a Coordinator. Both sides get\na `CollectNode` in the query plan.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "sort-limit",
    "description": "Make `SORT` aware of a subsequent `LIMIT` to enable\noptimizations internal to the `SortNode` that allow to reduce memory usage\nand, in many cases, improve the sorting speed.\n\nA `SortNode` needs to be followed by a `LimitNode` with no intervening nodes\nthat may change the element count (e.g. a `FilterNode` which cannot be moved\nbefore the sort, or a source node like `EnumerateCollectionNode`).\n\nThe optimizer may choose not to apply the rule if it decides that it offers\nlittle or no benefit. In particular, it does not apply the rule if the input\nsize is very small or if the output from the `LimitNode` is similar in size to\nthe input. In exceptionally rare cases, this rule could result in some small\nslowdown. If observed, you can disable the rule for the affected query at the\ncost of increased memory usage.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "reduce-extraction-to-projection",
    "description": "Modify `EnumerationCollectionNode` and `IndexNode` that would have\nextracted entire documents to only return a projection of each document.\n\nProjections are limited to at most 5 different document attributes by default.\nThe maximum number of projected attributes can optionally be adjusted by\nsetting the `maxProjections` hint for an AQL `FOR` operation since\nArangoDB 3.9.1.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "restrict-to-single-shard",
    "description": "Restrict operations to a single shard instead of applying\nthem for all shards if a collection operation (`IndexNode` or a\ndata modification node) only affects a single shard.\n  \nThis optimization can be applied for queries that access a collection only once\nin the query, and that do not use traversals, shortest path queries, and that\ndo not access collection data dynamically using the `DOCUMENT()`, `FULLTEXT()`,\n`NEAR()` or `WITHIN()` AQL functions. Additionally, the optimizer can only\napply this optimization if it can safely determine the values of all the\ncollection's shard keys from the query, and when the shard keys are covered by\na single index (this is always true if the shard key is the default `_key`).",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "optimize-count",
    "description": "Optimize subqueries to use an optimized code path for\ncounting documents.\n\nThe requirements are that the subquery result must only be used with the\n`COUNT()` or `LENGTH()` AQL function and not for anything else. The subquery\nitself must be read-only (no data modification subquery), not use nested `FOR`\nloops, no `LIMIT` statement, and no `FILTER` condition or calculation that\nrequires accessing document data. Accessing index data is supported for\nfiltering but not for further calculations.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "parallelize-gather",
    "description": "Apply an optimization to execute Coordinator `GatherNode`\nnodes in parallel. These notes cannot be parallelized if they depend on a\n`TraversalNode`, except for certain Disjoint SmartGraph traversals where the\ntraversal can run completely on the local DB-Server.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "async-prefetch",
    "description": "Allow query execution nodes to asynchronously prefetch the\nnext batch while processing the current batch, allowing parts of the query to\nrun in parallel. This is an experimental option as not all operations are\nthread-safe.",
    "flags": {
      "hidden": true,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": true,
      "enterpriseOnly": false
    }
  },
  {
    "name": "decay-unnecessary-sorted-gather",
    "description": "Avoid merge-sorting results on a Coordinator if they are all\nfrom a single shard and fully sorted by a DB-Server already.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "push-subqueries-to-dbserver",
    "description": "Execute subqueries entirely on a DB-Server if possible.\nSubqueries need to contain exactly one distribute/gather section, and only one\ncollection access or traversal, shortest path, or k-shortest paths query.",
    "flags": {
      "hidden": false,
      "clusterOnly": true,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": true
    }
  },
  {
    "name": "late-document-materialization-arangosearch",
    "description": "Try to read from the underlying collections of a View as late\nas possible if the involved attributes are covered by the View index.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "late-document-materialization",
    "description": "Try to read from collections as late as possible if the\ninvolved attributes are covered by regular indexes.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "late-materialization-offset-info",
    "description": "Get the search highlighting offsets as late as possible to\navoid unnecessary reads.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": true
    }
  },
  {
    "name": "splice-subqueries",
    "description": "Appears if subqueries are spliced into the surrounding query,\nreducing overhead for executing subqueries by inlining the execution.\nThis mainly benefits queries which execute subqueries very often that only\nreturn a few results at a time.\n\nThis optimization is performed on all subqueries and is applied after all other\noptimizations.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": false,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  }
]