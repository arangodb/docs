[
  {
    "name": "replace-function-with-index",
    "description": "Replace deprecated index functions such as `FULLTEXT()`,\n`NEAR()`, `WITHIN()`, or `WITHIN_RECTANGLE()` with a regular subquery.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": false,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "inline-subqueries",
    "description": "Try to pull subqueries out into their surrounding scope, e.g.\n`FOR x IN (FOR y IN collection FILTER y.value >= 5 RETURN y.test) RETURN x.a`\nbecomes `FOR tmp IN collection FILTER tmp.value >= 5 LET x = tmp.test RETURN x.a`.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "simplify-conditions",
    "description": "Replace parts in `CalculationNode` expressions with\nsimpler expressions.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "move-calculations-up",
    "description": "Move calculations up in the processing pipeline as far as\npossible (ideally out of enumerations) so they are not executed in loops if not\nrequired. It is quite common that this rule enables further optimizations.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "move-filters-up",
    "description": "Move filters up in the processing pipeline as far as possible\n(ideally out of inner loops) so they filter results as early as possible.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-redundant-calculations",
    "description": "Replace references to redundant calculations (expressions\nwith the exact same result) with a single reference, allowing other rules to\nremove no longer needed calculations.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-unnecessary-filters",
    "description": "Remove `FILTER` conditions that always evaluate to `true`.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-unnecessary-calculations",
    "description": "Remove all calculations whose result is not referenced in the\nquery. This can be a consequence of applying other optimizations.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "specialize-collect",
    "description": "TODO",
    "flags": {
      "hidden": true,
      "clusterOnly": false,
      "canBeDisabled": false,
      "canCreateAdditionalPlans": true,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-redundant-sorts",
    "description": "Try to merge multiple `SORT` statements into fewer sorts.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "optimize-subqueries",
    "description": "Apply optimizations to subqueries.\n               \nThis rule adds a `LIMIT` statement to qualifying subqueries to make them return\nless data. It also modifies the result value of subqueries in case only the\nnumber of subquery results is checked later. This saves copying the document\ndata from the subquery to the outer scope and may enable follow-up\noptimizations.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "interchange-adjacent-enumerations",
    "description": "Try out permutations of `FOR` statements in queries that contains\nmultiple loops, which may enable further optimizations by other rules.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": true,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "move-calculations-up-2",
    "description": "Second pass of moving calculations up in the processing\npipeline as far as possible, to pull them out of inner loops etc.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "move-filters-up-2",
    "description": "Second pass of moving filters up in the processing pipeline\nas far as possible so they filter results as early as possible.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-redundant-sorts-2",
    "description": "Second pass of trying to merge multiple `SORT` statements\ninto fewer sorts.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-sort-rand-limit-1",
    "description": "Remove `SORT RAND() LIMIT 1` constructs by moving the random iteration\ninto `EnumerateCollectionNode`.\n\nThe RocksDB storage engine doesn't allow to seek random documents efficiently.\nThis optimization picks a pseudo-random document based on a limited number of\nseeks within the collection's key range, selecting a random start key in the\nkey range, and then going a few steps before or after that.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-collect-variables",
    "description": "Remove `INTO` and `AGGREGATE` clauses from `COLLECT`\nstatements if the result is not used.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "propagate-constant-attributes",
    "description": "Insert constant values into `FILTER` conditions, replacing\ndynamic attribute values.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-data-modification-out-variables",
    "description": "Avoid setting the pseudo-variables `OLD` and `NEW` if they\nare not used in data modification queries.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "replace-or-with-in",
    "description": "Combine multiple `OR` equality conditions on the same\nvariable or attribute with an `IN` condition.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-redundant-or",
    "description": "Combine multiple `OR` conditions for the same variable or\nattribute into a single condition.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "geo-index-optimizer",
    "description": "Utilize geo-spatial indexes.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "use-indexes",
    "description": "Use indexes to iterate over collections, replacing\n`EnumerateCollectionNode` with `IndexNode` in the query plan.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-filter-covered-by-index",
    "description": "Replace or remove `FilterNode` if the filter conditions are\nalready covered by `IndexNode`.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-unnecessary-filters-2",
    "description": "Second pass of removing `FILTER` conditions that always\nevaluate to `true`.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "use-index-for-sort",
    "description": "Use indexes to avoid `SORT` operations, removing `SortNode`\nfrom the query plan.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "sort-in-values",
    "description": "Use a binary search for in-list lookups with a logarithmic\ncomplexity instead of the default linear complexity in-list lookup if the\ncomparison array on the right-hand side of an `IN` operator is pre-sorted by an\nextra function call.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "optimize-traversal-last-element-access",
    "description": "Transform accesses to the last vertex or edge of the path\noutput variable (`p.vertices[-1]` and `p.edges[-1]`) emitted by AQL traversals\n(`FOR v, e, p IN ...`) with accesses to the vertex or edge variable\n(`v` and `e`). This can avoid computing the path variable at all and enable\nfurther optimizations that are not possible on the path variable `p`.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "optimize-traversals",
    "description": "Optimize unused vertex, edge, and path output variables of\nAQL traversals away and try to move `FILTER` conditions into `TraversalNode`\nfor early pruning of results.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "optimize-paths",
    "description": "TODO",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-filter-covered-by-traversal",
    "description": "Replace or remove `FilterNode` if the filter conditions are\nalready covered by `TraversalNode`.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "handle-arangosearch-views",
    "description": "Appears whenever an `arangosearch` or `search-alias` View is accessed\nin a query.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": false,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "arangosearch-constrained-sort",
    "description": "TODO",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-unnecessary-calculations-2",
    "description": "Second pass of removing all calculations whose result is not\nreferenced in the query. This can be a consequence of applying other\noptimizations",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-redundant-path-var",
    "description": "Avoid computing the variables emitted by AQL traversals if\nthey are unused in the query, significantly reducing overhead.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "move-calculations-down",
    "description": "Move calculations down in the processing pipeline as far as\npossible (below `FILTER`, `LIMIT` and `SUBQUERY` nodes) so they are executed as\nlate as possible and not before their results are required.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "fuse-filters",
    "description": "Merges adjacent `FILTER` nodes together into a single\n`FILTER` node.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "move-filters-into-enumerate",
    "description": "Move filters on non-indexed collection attributes into\n`IndexNode` or `EnumerateCollectionNode` to allow early pruning of\nnon-matching documents. This optimization can help to avoid a lot of temporary\ndocument copies.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "remove-unnecessary-calculations-3",
    "description": "Third pass of removing all calculations whose result is not\nreferenced in the query. This can be a consequence of applying other\noptimizations",
    "flags": {
      "hidden": true,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": true,
      "enterpriseOnly": false
    }
  },
  {
    "name": "sort-limit",
    "description": "Make `SORT` aware of a subsequent `LIMIT` to enable\noptimizations internal to the `SortNode` that allow to reduce the memory usage\nand, in many cases, improve the sorting speed.\n\nA `SortNode` needs to be followed by a `LimitNode` with no intervening nodes\nthat may change the element count (e.g. a `FilterNode` which cannot be moved\nbefore the sort, or a source node like `EnumerateCollectionNode`).\n\nThe optimizer may choose not to apply the rule if it decides that it offers\nlittle or no benefit. In particular, it does not apply the rule if the input\nsize is very small or if the output from the `LimitNode` is similar in size to\nthe input. In exceptionally rare cases, this rule could result in some small\nslowdown. If observed, you can disable the rule for the affected query at the\ncost of increased memory usage.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "reduce-extraction-to-projection",
    "description": "Modify `EnumerationCollectionNode` and `IndexNode` that would have\nextracted entire documents to only return a projection of each document.\n\nProjections are limited to at most 5 different document attributes by default.\nThe maximum number of projected attributes can optionally be adjusted by\nsetting the `maxProjections` hint for an AQL `FOR` operation since\nArangoDB 3.9.1.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "optimize-count",
    "description": "Optimize subqueries to use an optimized code path for\ncounting documents.\n\nThe requirements are that the subquery result must only be used with the\n`COUNT()` or `LENGTH()` AQL function and not for anything else. The subquery\nitself must be read-only (no data modification subquery), not use nested `FOR`\nloops, no `LIMIT` statement, and no `FILTER` condition or calculation that\nrequires accessing document data. Accessing index data is supported for\nfiltering but not for further calculations.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "async-prefetch",
    "description": "TODO",
    "flags": {
      "hidden": true,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": true,
      "enterpriseOnly": false
    }
  },
  {
    "name": "late-document-materialization-arangosearch",
    "description": "Try to read from the underlying collections of a View as late\nas possible if the involved attributes are covered by the View index.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "late-document-materialization",
    "description": "Try to read from collections as late as possible if the\ninvolved attributes are covered by regular indexes.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  },
  {
    "name": "late-materialization-offset-info",
    "description": "TODO",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": true,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": true
    }
  },
  {
    "name": "splice-subqueries",
    "description": "Appears if subqueries are spliced into the surrounding query.\nThis is performed on all subqueries and cannot be switched off.\nThis optimization is applied after all other optimizations and reduces overhead\nfor executing subqueries by inlining the execution. This mainly benefits\nqueries which execute subqueries very often that only return a few results at\na time.",
    "flags": {
      "hidden": false,
      "clusterOnly": false,
      "canBeDisabled": false,
      "canCreateAdditionalPlans": false,
      "disabledByDefault": false,
      "enterpriseOnly": false
    }
  }
]