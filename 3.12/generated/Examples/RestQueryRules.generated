<span class="hljs-meta">shell&gt;</span><span class="bash"> curl --header <span class="hljs-string">&#x27;accept: application/json&#x27;</span> --dump - http://localhost:8529/_api/query/rules</span>

HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
content-type: application/json
cache-control: no-cache, no-store, must-revalidate, pre-check=<span class="hljs-number">0</span>, post-check=<span class="hljs-number">0</span>, max-age=<span class="hljs-number">0</span>, s-maxage=<span class="hljs-number">0</span>
connection: Keep-Alive
content-length: <span class="hljs-number">17792</span>
content-security-policy: frame-ancestors <span class="hljs-string">&#x27;self&#x27;</span>; form-action <span class="hljs-string">&#x27;self&#x27;</span>;
expires: <span class="hljs-number">0</span>
pragma: no-cache
server: ArangoDB
strict-transport-security: max-age=<span class="hljs-number">31536000</span> ; includeSubDomains
x-arango-queue-time-seconds: <span class="hljs-number">0.000000</span>
x-content-type-options: nosniff

[ 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;replace-function-with-index&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Replace deprecated index functions such as `FULLTEXT()`,\n`NEAR()`, `WITHIN()`, or `WITHIN_RECTANGLE()` with a regular subquery.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;inline-subqueries&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Try to pull subqueries out into their surrounding scope, e.g.\n`FOR x IN (FOR y IN collection FILTER y.value &gt;= 5 RETURN y.test) RETURN x.a`\nbecomes `FOR tmp IN collection FILTER tmp.value &gt;= 5 LET x = tmp.test RETURN x.a`.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;simplify-conditions&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Replace parts in `CalculationNode` expressions with\nsimpler expressions.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;move-calculations-up&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Move calculations up in the processing pipeline as far as\npossible (ideally out of enumerations) so they are not executed in loops if not\nrequired. It is quite common that this rule enables further optimizations.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;move-filters-up&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Move filters up in the processing pipeline as far as possible\n(ideally out of inner loops) so they filter results as early as possible.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-redundant-calculations&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Replace references to redundant calculations (expressions\nwith the exact same result) with a single reference, allowing other rules to\nremove no longer needed calculations.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-unnecessary-filters&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Remove `FILTER` conditions that always evaluate to `true`.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-unnecessary-calculations&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Remove all calculations whose result is not referenced in the\nquery. This can be a consequence of applying other optimizations.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;specialize-collect&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Appears whenever a `COLLECT` statement is used in a query to determine\nthe type of `CollectNode` to use.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-redundant-sorts&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Try to merge multiple `SORT` statements into fewer sorts.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;optimize-subqueries&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Apply optimizations to subqueries.\n\nThis rule adds a `LIMIT` statement to qualifying subqueries to make them return\nless data. It also modifies the result value of subqueries in case only the\nnumber of subquery results is checked later. This saves copying the document\ndata from the subquery to the outer scope and may enable follow-up\noptimizations.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;interchange-adjacent-enumerations&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Try out permutations of `FOR` statements in queries that contain\nmultiple loops, which may enable further optimizations by other rules.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;move-calculations-up-2&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Second pass of moving calculations up in the processing\npipeline as far as possible, to pull them out of inner loops etc.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;move-filters-up-2&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Second pass of moving filters up in the processing pipeline\nas far as possible so they filter results as early as possible.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-redundant-sorts-2&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Second pass of trying to merge multiple `SORT` statements\ninto fewer sorts.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-sort-rand-limit-1&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Remove `SORT RAND() LIMIT 1` constructs by moving the random iteration\ninto `EnumerateCollectionNode`.\n\nThe RocksDB storage engine doesn&#x27;t allow to seek random documents efficiently.\nThis optimization picks a pseudo-random document based on a limited number of\nseeks within the collection&#x27;s key range, selecting a random start key in the\nkey range, and then going a few steps before or after that.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-collect-variables&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Remove `INTO` and `AGGREGATE` clauses from `COLLECT`\nstatements if the result is not used.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;propagate-constant-attributes&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Insert constant values into `FILTER` conditions, replacing\ndynamic attribute values.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-data-modification-out-variables&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Avoid setting the pseudo-variables `OLD` and `NEW` if they\nare not used in data modification queries.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;replace-or-with-in&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Combine multiple `OR` equality conditions on the same\nvariable or attribute with an `IN` condition.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-redundant-or&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Combine multiple `OR` conditions for the same variable or\nattribute into a single condition.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;geo-index-optimizer&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Utilize geo-spatial indexes.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;use-indexes&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Use indexes to iterate over collections, replacing\n`EnumerateCollectionNode` with `IndexNode` in the query plan.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-filter-covered-by-index&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Replace or remove `FilterNode` if the filter conditions are\nalready covered by `IndexNode`.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-unnecessary-filters-2&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Second pass of removing `FILTER` conditions that always\nevaluate to `true`.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;use-index-for-sort&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Use indexes to avoid `SORT` operations, removing `SortNode`\nfrom the query plan.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;sort-in-values&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Use a binary search for in-list lookups with a logarithmic\ncomplexity instead of the default linear complexity in-list lookup if the\ncomparison array on the right-hand side of an `IN` operator is pre-sorted by an\nextra function call.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;optimize-traversal-last-element-access&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Transform accesses to the last vertex or edge of the path\noutput variable (`p.vertices[-1]` and `p.edges[-1]`) emitted by AQL traversals\n(`FOR v, e, p IN ...`) with accesses to the vertex or edge variable\n(`v` and `e`). This can avoid computing the path variable at all and enable\nfurther optimizations that are not possible on the path variable `p`.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;optimize-traversals&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Try to move `FILTER` conditions into `TraversalNode` for\nearly pruning of results, apply traversal projections, and avoid calculating\nedge and path output variables that are not declared in the query for the\nAQL traversal.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;optimize-paths&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Check how the output variables of `K_PATHS`, `K_SHORTEST_PATHS`,\nand `ALL_SHORTEST_PATHS` path search graph algorithms are used and avoid\nloading the vertex documents if they are not accessed in the query.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-filter-covered-by-traversal&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Replace or remove `FilterNode` if the filter conditions are\nalready covered by `TraversalNode`.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;handle-arangosearch-views&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Appears whenever an `arangosearch` or `search-alias` View is accessed\nin a query.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;arangosearch-constrained-sort&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Make nodes of type `EnumerateViewNode` aware of `SORT` with a\nsubsequent `LIMIT` when using Views to reduce memory usage and avoid unnecessary\nsorting that has already been carried out by ArangoSearch internally.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-unnecessary-calculations-2&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Second pass of removing all calculations whose result is not\nreferenced in the query. This can be a consequence of applying other\noptimizations&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-redundant-path-var&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Avoid computing the variables emitted by AQL traversals if\nthey are declared but unused in the query, or only used in filters that are\npulled into the traversal, significantly reducing overhead.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;move-calculations-down&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Move calculations down in the processing pipeline as far as\npossible (below `FILTER`, `LIMIT` and `SUBQUERY` nodes) so they are executed as\nlate as possible and not before their results are required.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;fuse-filters&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Merges adjacent `FILTER` nodes together into a single\n`FILTER` node.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;move-filters-into-enumerate&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Move filters on non-indexed collection attributes into\n`IndexNode` or `EnumerateCollectionNode` to allow early pruning of\nnon-matching documents. This optimization can help to avoid a lot of temporary\ndocument copies.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;remove-unnecessary-calculations-3&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Third pass of removing all calculations whose result is not\nreferenced in the query. This can be a consequence of applying other\noptimizations&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;sort-limit&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Make `SORT` aware of a subsequent `LIMIT` to enable\noptimizations internal to the `SortNode` that allow to reduce memory usage\nand, in many cases, improve the sorting speed.\n\nA `SortNode` needs to be followed by a `LimitNode` with no intervening nodes\nthat may change the element count (e.g. a `FilterNode` which cannot be moved\nbefore the sort, or a source node like `EnumerateCollectionNode`).\n\nThe optimizer may choose not to apply the rule if it decides that it offers\nlittle or no benefit. In particular, it does not apply the rule if the input\nsize is very small or if the output from the `LimitNode` is similar in size to\nthe input. In exceptionally rare cases, this rule could result in some small\nslowdown. If observed, you can disable the rule for the affected query at the\ncost of increased memory usage.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;reduce-extraction-to-projection&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Modify `EnumerationCollectionNode` and `IndexNode` that would have\nextracted entire documents to only return a projection of each document.\n\nProjections are limited to at most 5 different document attributes by default.\nThe maximum number of projected attributes can optionally be adjusted by\nsetting the `maxProjections` hint for an AQL `FOR` operation since\nArangoDB 3.9.1.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;optimize-count&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Optimize subqueries to use an optimized code path for\ncounting documents.\n\nThe requirements are that the subquery result must only be used with the\n`COUNT()` or `LENGTH()` AQL function and not for anything else. The subquery\nitself must be read-only (no data modification subquery), not use nested `FOR`\nloops, no `LIMIT` statement, and no `FILTER` condition or calculation that\nrequires accessing document data. Accessing index data is supported for\nfiltering but not for further calculations.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;async-prefetch&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Allow query execution nodes to asynchronously prefetch the\nnext batch while processing the current batch, allowing parts of the query to\nrun in parallel. This is an experimental option as not all operations are\nthread-safe.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;late-document-materialization-arangosearch&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Try to read from the underlying collections of a View as late\nas possible if the involved attributes are covered by the View index.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;late-document-materialization&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Try to read from collections as late as possible if the\ninvolved attributes are covered by regular indexes.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;late-materialization-offset-info&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Get the search highlighting offsets as late as possible to\navoid unnecessary reads.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">true</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">true</span> 
    } 
  }, 
  { 
    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;splice-subqueries&quot;</span>, 
    <span class="hljs-string">&quot;description&quot;</span> : <span class="hljs-string">&quot;Appears if subqueries are spliced into the surrounding query,\nreducing overhead for executing subqueries by inlining the execution.\nThis mainly benefits queries which execute subqueries very often that only\nreturn a few results at a time.\n\nThis optimization is performed on all subqueries and is applied after all other\noptimizations.&quot;</span>, 
    <span class="hljs-string">&quot;flags&quot;</span> : { 
      <span class="hljs-string">&quot;hidden&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;clusterOnly&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canBeDisabled&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;canCreateAdditionalPlans&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;disabledByDefault&quot;</span> : <span class="hljs-literal">false</span>, 
      <span class="hljs-string">&quot;enterpriseOnly&quot;</span> : <span class="hljs-literal">false</span> 
    } 
  } 
]
