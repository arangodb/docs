arangosh&gt; db._profileQuery(`
........&gt; FOR u IN myusers
........&gt;  COLLECT ageGroup = FLOOR(u.age / 10) * 10
........&gt;  AGGREGATE minAge = MIN(u.age), maxAge = MAX(u.age), len = LENGTH(u)
........&gt;  RETURN {
........&gt;    ageGroup, 
........&gt;    minAge, 
........&gt;    maxAge,
........&gt;    len
........&gt;  }`, {}, {colors: false}
........&gt; );
Query String (186 chars, cacheable: false):
 FOR u IN myusers
  COLLECT ageGroup = FLOOR(u.age / 10) * 10
  AGGREGATE minAge = MIN(u.age), maxAge = MAX(u.age), len = LENGTH(u)
  RETURN {
    ageGroup, 
    minAge, 
    maxAge,
    len
  }

Execution plan:
 Id   NodeType                  Calls   Items   Runtime [s]   Comment
  1   SingletonNode                 1       1       0.00001   * ROOT
  2   EnumerateCollectionNode       1      20       0.00009     - FOR u IN myusers   /* full collection scan, projections: `age`  */
  3   CalculationNode               1      20       0.00003       - LET #5 = (FLOOR((u.`age` / 10)) * 10)   /* simple expression */   /* collections used: u : myusers */
  4   CalculationNode               1      20       0.00001       - LET #7 = u.`age`   /* attribute expression */   /* collections used: u : myusers */
  6   CollectNode                   1       7       0.00005       - COLLECT ageGroup = #5 AGGREGATE minAge = MIN(#7), maxAge = MAX(#7), len = LENGTH()   /* hash */
  9   SortNode                      1       7       0.00002       - SORT ageGroup ASC   /* sorting strategy: standard */
  7   CalculationNode               1       7       0.00002       - LET #11 = { &quot;ageGroup&quot; : ageGroup, &quot;minAge&quot; : minAge, &quot;maxAge&quot; : maxAge, &quot;len&quot; : len }   /* simple expression */
  8   ReturnNode                    1       7       0.00001       - RETURN #11

Indexes used:
 none

Optimization rules applied:
 Id   RuleName
  1   move-calculations-up
  2   remove-redundant-calculations
  3   remove-unnecessary-calculations
  4   move-calculations-up-2
  5   move-calculations-down
  6   reduce-extraction-to-projection

Query Statistics:
 Writes Exec   Writes Ign   Scan Full   Scan Index   Filtered   Peak Mem [b]   Exec Time [s]
           0            0          20            0          0          32768         0.00111

Query Profile:
 Query Stage           Duration [s]
 initializing               0.00001
 parsing                    0.00016
 optimizing ast             0.00002
 loading collections        0.00000
 instantiating plan         0.00005
 optimizing plan            0.00060
 executing                  0.00026
 finalizing                 0.00003


